#!/usr/bin/env bash

# create a FIFO file, used to manage the I/O redirection from shell
PIPE=$(mktemp -u --tmpdir ${0##*/}.XXXXXXXX)
mkfifo $PIPE

# attach a file descriptor to the file
exec 3<> $PIPE

# add handler to manage process shutdown
function on_exit() {
    echo "quit" >&3
    rm -f $PIPE
}
trap on_exit EXIT
#  MENU="$(rofi -sep "|" -dmenu -i -p 'Power menu' -location 3 -yoffset 25 -xoffset -5 -width 12 -hide-scrollbar -line-padding 4 -padding 20 -lines 5 -font "Misc Termsyn 12" -show-icons -icon-theme "Papirus"  <<< "✘ Cancel|➤ Lock|⥂ Logout|🗘 Reboot|⏻ Shutdown")"
# add handler for tray icon left click
function on_click() {
	
	BAR_HEIGHT=15  # polybar height
	BORDER_SIZE=10  # border size from your wm settings
	YAD_WIDTH=222  # 222 is minimum possible value
	YAD_HEIGHT=188 # 188 is minimum possible value
	   

    if [ "$(xdotool getwindowfocus getwindowname)" = "yad-calendar" ]; then
        exit 0
    fi

    eval "$(xdotool getmouselocation --shell)"
    eval "$(xdotool getdisplaygeometry --shell)"

    # X
    if [ "$((X + YAD_WIDTH / 2 + 2 + BORDER_SIZE))" -gt "$WIDTH" ]; then #Right side
        : $((pos_x = WIDTH - YAD_WIDTH - BORDER_SIZE - 4))
    elif [ "$((X - YAD_WIDTH / 2 - 2 - BORDER_SIZE))" -lt 1 ]; then #Left side
        : $((pos_x = BORDER_SIZE))
    else #Center
        : $((pos_x = X - YAD_WIDTH / 2 - 2))
    fi

    # Y
    if [ "$Y" -gt "$((HEIGHT / 2))" ]; then #Bottom
        : $((pos_y = HEIGHT - YAD_HEIGHT - 4 - BAR_HEIGHT - BORDER_SIZE))
    else #Top
        : $((pos_y = BAR_HEIGHT + BORDER_SIZE))
    fi

    yad --calendar --undecorated --fixed --close-on-unfocus --no-buttons \
        --width=$YAD_WIDTH --height=$YAD_HEIGHT --posx=$pos_x --posy=$pos_y \
        --title="yad-calendar" >/dev/null &


}
export -f on_click

# create the notification icon
yad --notification                  \
    --listen                        \
    --image=$HOME/.config/i3status/i3status_scripts/calendar.png             \
    --text="Calendar"   \
    --command="bash -c on_click" <&3
   

## Application menu file ###############################################

GET_MENU='Terminal! urxvt
Text! geany
'
## MENU items ##########################################################

MENU_ITEMS="` echo "$GET_MENU" | tr '\n' '|' | sed '$s/.$//' `"

## 4 Write menu to file descriptor to generate MENU ####################
 echo "menu:$MENU_ITEMS" >&3

## Check if menu file is provided ######################################
 
  if [ -z "$GET_MENU" ]; then 
  echo "traymenu usage: $0 /path/to/menu/file" && exit
  else
  on_click
  fi

########################################################################  
